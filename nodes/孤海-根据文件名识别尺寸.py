import re
import math

class 孤海根据文件名识别尺寸:
    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "文件名": ("STRING", {"default": "", "multiline": False}),
                "尺寸定义": ("STRING", {
                    "multiline": True, 
                    "default": "【1寸】2.5x3.5,画布:12.7x8.9\n【2寸】3.5x4.9,画布:8.9x12.7\n【5寸】8.9×12.7，画布:15x10"
                }),
                "单位": (["厘米", "像素", "英寸"], {"default": "厘米"}),
                "分辨率": ("INT", {"default": 300, "min": 72, "max": 5000}),
            }
        }

    RETURN_TYPES = ("FLOAT", "FLOAT", "STRING", "FLOAT", "FLOAT")
    RETURN_NAMES = ("宽度", "高度", "尺寸名", "画布宽", "画布高")
    FUNCTION = "处理"
    CATEGORY = "孤海定制"

    def 处理(self, 文件名, 尺寸定义, 单位, 分辨率):
        # 预处理文件名：将中文数字尺寸转换为阿拉伯数字格式
        中文尺寸映射 = {
            "一寸": "1寸",
            "二寸": "2寸",
            "两寸": "2寸",
            "三寸": "3寸",
            "四寸": "4寸",
            "五寸": "5寸",
            "六寸": "6寸",
            "七寸": "7寸"
        }
        
        # 创建预处理后的文件名（保留原始文件名不变）
        预处理文件名 = 文件名
        for 中文尺寸, 数字尺寸 in 中文尺寸映射.items():
            if 中文尺寸 in 预处理文件名:
                预处理文件名 = 预处理文件名.replace(中文尺寸, 数字尺寸)

        # 改进正则表达式以处理更多情况
        pattern = r'【(.*?)】\s*([\d.]+)\s*[xX×]\s*([\d.]+)\s*(?:[,，]\s*画布\s*[:：=]?\s*([\d.]+)\s*[xX×]\s*([\d.]+))?'
        匹配结果 = re.findall(pattern, 尺寸定义)
        
        if not 匹配结果:
            # 尝试不含画布的简化格式
            pattern = r'【(.*?)】\s*([\d.]+)\s*[xX×]\s*([\d.]+)'
            匹配结果 = re.findall(pattern, 尺寸定义)
        
        目标尺寸 = None
        for 匹配项 in 匹配结果:
            尺寸名 = 匹配项[0]
            if 尺寸名 in 预处理文件名:  # 使用预处理后的文件名进行匹配
                目标尺寸 = 匹配项
                break
        
        if not 目标尺寸:
            return (0.0, 0.0, "未匹配", 0.0, 0.0)
        
        # 提取尺寸数据
        尺寸名 = 目标尺寸[0]
        try:
            宽厘米 = float(目标尺寸[1])
            高厘米 = float(目标尺寸[2])
            # 如果匹配项长度大于3说明有画布数据
            有画布数据 = len(目标尺寸) > 3 and 目标尺寸[3] and 目标尺寸[4]
            画布宽厘米 = float(目标尺寸[3]) if 有画布数据 else 0.0
            画布高厘米 = float(目标尺寸[4]) if 有画布数据 else 0.0
        except ValueError:
            return (0.0, 0.0, "格式错误", 0.0, 0.0)
        
        # 单位转换
        if 单位 == "厘米":
            宽度, 高度, 画布宽, 画布高 = 宽厘米, 高厘米, 画布宽厘米, 画布高厘米
        elif 单位 == "英寸":
            转换系数 = 0.393701  # 厘米转英寸
            宽度 = 宽厘米 * 转换系数
            高度 = 高厘米 * 转换系数
            画布宽 = 画布宽厘米 * 转换系数
            画布高 = 画布高厘米 * 转换系数
        elif 单位 == "像素":
            像素密度 = 分辨率 / 2.54  # 每厘米像素数
            宽度 = 宽厘米 * 像素密度
            高度 = 高厘米 * 像素密度
            画布宽 = 画布宽厘米 * 像素密度
            画布高 = 画布高厘米 * 像素密度
        
        return (宽度, 高度, 尺寸名, 画布宽, 画布高)

# 节点注册
NODE_CLASS_MAPPINGS = {
    "孤海根据文件名识别尺寸": 孤海根据文件名识别尺寸
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "孤海根据文件名识别尺寸": "孤海-根据文件名识别尺寸"
}